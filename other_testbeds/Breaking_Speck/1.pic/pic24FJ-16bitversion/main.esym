D G "__PCD__" 0 0 ""4.114""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""27-Oct-15""
D G "__TIME__" 0 0 ""13:50:27"" "Standard Header file for the PIC24FJ32GA002 device ////////////////"
d G "PIN_A0" 1 22 "5648"
d G "PIN_A1" 1 23 "5649"
d G "PIN_A2" 1 24 "5650"
d G "PIN_A3" 1 25 "5651"
d G "PIN_A4" 1 26 "5652"
d G "PIN_B0" 1 28 "5712"
d G "PIN_B1" 1 29 "5713"
d G "PIN_B2" 1 30 "5714"
d G "PIN_B3" 1 31 "5715"
d G "PIN_B4" 1 32 "5716"
d G "PIN_B5" 1 33 "5717"
d G "PIN_B6" 1 34 "5718"
d G "PIN_B7" 1 35 "5719"
d G "PIN_B8" 1 36 "5720"
d G "PIN_B9" 1 37 "5721"
d G "PIN_B10" 1 38 "5722"
d G "PIN_B11" 1 39 "5723"
d G "PIN_B12" 1 40 "5724"
d G "PIN_B13" 1 41 "5725"
d G "PIN_B14" 1 42 "5726"
d G "PIN_B15" 1 43 "5727"
d G "FALSE" 1 46 "0"
d G "TRUE" 1 47 "1"
d G "BYTE" 1 49 "unsigned int8"
d G "BOOLEAN" 1 50 "int1"
d G "getc" 1 52 "getch"
d G "fgetc" 1 53 "getch"
d G "getchar" 1 54 "getch"
d G "putc" 1 55 "putchar"
d G "fputc" 1 56 "putchar"
d G "fgets" 1 57 "gets"
d G "fputs" 1 58 "puts"
d G "UART_ADDRESS" 1 64 "2"
d G "UART_DATA" 1 65 "4"
d G "UART_AUTODETECT" 1 66 "8"
d G "UART_AUTODETECT_NOWAIT" 1 67 "9"
d G "UART_WAKEUP_ON_RDA" 1 68 "10"
d G "UART_SEND_BREAK" 1 69 "13"
d G "WDT_ON" 1 76 "1"
d G "WDT_OFF" 1 77 "0"
d G "RESTART_POWER_UP" 1 82 "0"
d G "RESTART_BROWNOUT" 1 83 "1"
d G "RESTART_WATCHDOG" 1 84 "4"
d G "RESTART_SOFTWARE" 1 85 "6"
d G "RESTART_MCLR" 1 86 "7"
d G "RESTART_ILLEGAL_OP" 1 87 "14"
d G "RESTART_TRAP_CONFLICT" 1 88 "15"
d G "SLEEP_FULL" 1 91 "0" "Default"
d G "SLEEP_IDLE" 1 92 "1" "Clock and peripherals don't stop"
d G "OSC_INTERNAL" 1 96 "32"
d G "OSC_CRYSTAL" 1 97 "1"
d G "OSC_CLOCK" 1 98 "2"
d G "OSC_RC" 1 99 "3"
d G "OSC_SECONDARY" 1 100 "16"
d G "TMR_DISABLED" 1 107 "0x0000"
d G "TMR_INTERNAL" 1 108 "0xA000"
d G "TMR_EXTERNAL" 1 109 "0xA002"
d G "TMR_GATE" 1 110 "0x0040"
d G "T1_EXTERNAL_SYNC" 1 111 "0xA006" "This only applies to Timer1"
d G "T1_EXTERNAL_RTC" 1 112 "0xC002" "This only applies to Timer1"
d G "TMR_DIV_BY_1" 1 114 "0x0000"
d G "TMR_DIV_BY_8" 1 115 "0x0010"
d G "TMR_DIV_BY_64" 1 116 "0x0020"
d G "TMR_DIV_BY_256" 1 117 "0x0030"
d G "TMR_32_BIT" 1 118 "0x0008" "Only for even numbered timers"
d G "CAPTURE_OFF" 1 124 "0x0000" "Capture OFF"
d G "CAPTURE_EE" 1 125 "0x0001" "Capture Every Edge"
d G "CAPTURE_FE" 1 126 "0x0002" "Capture Falling Edge"
d G "CAPTURE_RE" 1 127 "0x0003" "Capture Rising Edge"
d G "CAPTURE_DIV_4" 1 128 "0x0004" "Capture Every 4th Rising Edge"
d G "CAPTURE_DIV_16" 1 129 "0x0005" "Capture Every 16th Rising Edge"
d G "CAPTURE_INTERRUPT_ONLY" 1 130 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
d G "INTERRUPT_EVERY_CAPTURE" 1 133 "0x0000" "Interrupt on every capture event"
d G "INTERRUPT_SECOND_CAPTURE" 1 134 "0x0020" "Interrupt on every second capture event"
d G "INTERRUPT_THIRD_CAPTURE" 1 135 "0x0040" "Interrupt on every third capture event"
d G "INTERRUPT_FOURTH_CAPTURE" 1 136 "0x0060" "Interrupt on every fourth capture event"
d G "CAPTURE_TIMER2" 1 139 "0x0080" "On capture event Timer 2 is captured"
d G "CAPTURE_TIMER3" 1 140 "0x0000" "On capture event Timer 3 is captured"
d G "CAPTURE_HALT_IDLE" 1 143 "0x2000" "Capture module halts during idle mode"
d G "CAPTURE_CONTINUE_IDLE" 1 144 "0x0000" "Capture module continues during idle mode"
d G "COMPARE_OFF" 1 150 "0x0000" "Compare OFF"
d G "COMPARE_SET_ON_MATCH" 1 151 "0x0001" "Pin from low to high on match"
d G "COMPARE_CLR_ON_MATCH" 1 152 "0x0002" "Pin from high to low on match"
d G "COMPARE_TOGGEL" 1 153 "0x0003" "Pin will toggle on every match occurrence"
d G "COMPARE_SINGLE_PULSE" 1 154 "0x0004" "Pin will generate single pulse on first match"
d G "COMPARE_CONT_PULSE" 1 155 "0x0005" "Pin will pulse for every match"
d G "COMPARE_PWM" 1 156 "0x0006" "Compare operates as PWM with fault pin disabled"
d G "COMPARE_PWM_FAULT" 1 157 "0x0007" "Compare operates as PWM with fault pin enabled"
d G "COMPARE_TIMER2" 1 160 "0x0000" "Timer 2 is the base timer"
d G "COMPARE_TIMER3" 1 161 "0x0008" "Timer 3 is the base timer"
d G "COMPARE_HALT_IDLE" 1 164 "0x2000" "Compare module halts during idle mode"
d G "COMPARE_CONTINUE_IDLE" 1 165 "0x0000" "Compare module continues during idle mode"
d G "SPI_MASTER" 1 172 "0x0020"
d G "SPI_SLAVE" 1 173 "0x0000"
d G "SPI_SCK_IDLE_HIGH" 1 175 "0x0040"
d G "SPI_SCK_IDLE_LOW" 1 176 "0x0000"
d G "SPI_XMIT_L_TO_H" 1 178 "0x0000"
d G "SPI_XMIT_H_TO_L" 1 179 "0x0100"
d G "SPI_MODE_16B" 1 181 "0x0400"
d G "SPI_MODE_8B" 1 182 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 184 "0x0200"
d G "SPI_SAMPLE_AT_MIDDLE" 1 185 "0x0000"
d G "SPI_SS_ENABLED" 1 187 "0x0000"
d G "SPI_SS_DISABLED" 1 188 "0x0080"
d G "SPI_CLK_DIV_1" 1 191 "0x001F"
d G "SPI_CLK_DIV_2" 1 192 "0x001B"
d G "SPI_CLK_DIV_3" 1 193 "0x0017"
d G "SPI_CLK_DIV_4" 1 194 "0x001E"
d G "SPI_CLK_DIV_5" 1 195 "0x000F"
d G "SPI_CLK_DIV_6" 1 196 "0x000B"
d G "SPI_CLK_DIV_7" 1 197 "0x0007"
d G "SPI_CLK_DIV_8" 1 198 "0x0003"
d G "SPI_CLK_DIV_12" 1 199 "0x0016"
d G "SPI_CLK_DIV_16" 1 200 "0x001D"
d G "SPI_CLK_DIV_20" 1 201 "0x000E"
d G "SPI_CLK_DIV_24" 1 202 "0x000A"
d G "SPI_CLK_DIV_28" 1 203 "0x0006"
d G "SPI_CLK_DIV_32" 1 204 "0x0002"
d G "SPI_CLK_DIV_48" 1 205 "0x0015"
d G "SPI_CLK_DIV_64" 1 206 "0x001C"
d G "SPI_CLK_DIV_80" 1 207 "0x000D"
d G "SPI_CLK_DIV_96" 1 208 "0x0009"
d G "SPI_CLK_DIV_112" 1 209 "0x0005"
d G "SPI_CLK_DIV_128" 1 210 "0x0001"
d G "SPI_CLK_DIV_192" 1 211 "0x0014"
d G "SPI_CLK_DIV_256" 1 212 "0x0010"
d G "SPI_CLK_DIV_320" 1 213 "0x000C"
d G "SPI_CLK_DIV_384" 1 214 "0x0008"
d G "SPI_CLK_DIV_448" 1 215 "0x0004"
d G "SPI_CLK_DIV_512" 1 216 "0x0000"
d G "SPI_L_TO_H" 1 219 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 220 "SPI_SCK_IDLE_HIGH"
d G "ADC_OFF" 1 229 "0x10000"
d G "ADC_CLOCK" 1 230 "0x0000" "External"
d G "ADC_CLOCK_DIV_2" 1 231 "0x0001"
d G "ADC_CLOCK_DIV_4" 1 232 "0x0003"
d G "ADC_CLOCK_DIV_8" 1 233 "0x0007"
d G "ADC_CLOCK_DIV_16" 1 234 "0x000F"
d G "ADC_CLOCK_DIV_32" 1 235 "0x001F"
d G "ADC_CLOCK_DIV_64" 1 236 "0x007F"
d G "ADC_CLOCK_DIV_128" 1 237 "0x00FF"
d G "ADC_CLOCK_INTERNAL" 1 238 "0x8000" "Internal"
d G "ADC_TAD_MUL_0" 1 242 "0x0000"
d G "ADC_TAD_MUL_2" 1 243 "0x0200"
d G "ADC_TAD_MUL_4" 1 244 "0x0400"
d G "ADC_TAD_MUL_8" 1 245 "0x0800"
d G "ADC_TAD_MUL_16" 1 246 "0x1000"
d G "ADC_TAD_MUL_31" 1 247 "0x1F00"
d G "ADC_START_AND_READ" 1 250 "0x07"
d G "ADC_START_ONLY" 1 251 "0x01"
d G "ADC_READ_ONLY" 1 252 "0x06"
d G "NO_ANALOGS" 1 259 "0" "None"
d G "ALL_ANALOG" 1 260 "0xFFFFFFFF" "All"
d G "sAN0" 1 261 "0x00000001" "| A1"
d G "sAN1" 1 262 "0x00000002" "| A2"
d G "sAN2" 1 263 "0x00000004" "| B0"
d G "sAN3" 1 264 "0x00000008" "| B1"
d G "sAN4" 1 265 "0x00000010" "| B2"
d G "sAN5" 1 266 "0x00000020" "| 3"
d G "sAN6" 1 267 "0x00000040" "| n"
d G "sAN7" 1 268 "0x00000080" "| n"
d G "sAN8" 1 269 "0x00000100" "| n"
d G "sAN9" 1 270 "0x00000200" "| B15"
d G "sAN10" 1 271 "0x00000400" "| B13"
d G "sAN11" 1 272 "0x00000800" "| B14"
d G "sAN12" 1 273 "0x00001000" "| 12"
d G "VSS_VDD" 1 276 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 1 277 "0x6000" "Range VrefL-VrefH"
d G "VREF_VDD" 1 278 "0x4000" "Range VrefL-Vdd"
d G "VSS_VREF" 1 279 "0x2000" "Range 0-VrefH"
d G "NC_NC_NC_NC" 1 284 "0x00"
d G "A4_A5_NC_NC" 1 285 "0x201"
d G "A4_VR_NC_NC" 1 286 "0x200"
d G "A5_VR_NC_NC" 1 287 "0x202"
d G "NC_NC_A2_A3" 1 288 "0x804"
d G "NC_NC_A2_VR" 1 289 "0x800"
d G "NC_NC_A3_VR" 1 290 "0x808"
d G "A4_A5_A2_A3" 1 291 "A4_A5_NC_NC | NC_NC_A2_A3"
d G "A4_VR_A2_VR" 1 292 "A4_VR_NC_NC | NC_NC_A2_VR"
d G "A5_VR_A3_VR" 1 293 "A5_VR_NC_NC |  NC_NC_A3_VR"
d G "C1_INVERT" 1 295 "0x10"
d G "C2_INVERT" 1 296 "0x20"
d G "C1_OUTPUT" 1 297 "0x40"
d G "C2_OUTPUT" 1 298 "0x80"
d G "VREF_DISABLED" 1 306 "0x0000"
d G "VREF_ANALOG" 1 307 "0x0010"
d G "VREF_HIGH" 1 308 "0x1000"
d G "VREF_LOW" 1 309 "0x1020"
d G "PAR_ENABLE" 1 318 "0x8000"
d G "PAR_DISABLE" 1 319 "0x0000" "Module enable/disable options"
d G "PAR_STOP_IN_IDLE" 1 320 "0x2000"
d G "PAR_CONTINUE_IN_IDLE" 1 321 "0x0000"
d G "PAR_ADDR_NOT_MULTIPLEXED" 1 322 "0x0000" "Address multiplexing options"
d G "PAR_LOW_ADDR_MULTIPLEXED" 1 323 "0x0800" "Address multiplexing options"
d G "PAR_FULL_ADDR_MULTIPLEXED" 1 324 "0x1000" "Address multiplexing options"
d G "PAR_PTBEEN_ENABLE" 1 325 "0x0400" "Byte Enable Port Enable bit"
d G "PAR_PTWREN_ENABLE" 1 326 "0x0200" "Write Enable Strobe bit"
d G "PAR_PTRDEN_ENABLE" 1 327 "0x0100" "Read/Write Strobe Port bit"
d G "PAR_ALP_ACTIVE_HIGH" 1 328 "0x0020" "Address latch polarity high"
d G "PAR_BEP_ACTIVE_HIGH" 1 329 "0x0004" "Byte Enable Polarity"
d G "PAR_WRSP_ACTIVE_HIGH" 1 330 "0x0002" "Write strobe Polarity bit"
d G "PAR_RDSP_ACTIVE_HIGH" 1 331 "0x0001" "Read strobe Polarity bit"
d G "PAR_CS_XX" 1 332 "0x0000" "Chip select pins used for address"
d G "PAR_CS_X1" 1 333 "0x0008" "Chip select pin 1 used, active high"
d G "PAR_CS_X0" 1 334 "0x0000" "Chip select pin 1 used, active low"
d G "PAR_CS_1X" 1 335 "0x0050" "Chip select pin 2 used, active high"
d G "PAR_CS_0X" 1 336 "0x0040" "Chip select pin 2 used, active low"
d G "PAR_CS_00" 1 337 "0x0080" "Chip select pins 1,2 used, active low"
d G "PAR_CS_11" 1 338 "0x0098" "Chip select pins 1,2 used, active high"
d G "PAR_CS_10" 1 339 "0x0090" "Chip select pins 1,2 used, 1 is active low, 2 is high"
d G "PAR_CS_01" 1 340 "0x0088" "Chip select pins 1,2 used, 1 is active high, 2 is low"
d G "PAR_INTR_ON_RW" 1 341 "0x20000000" "Interrupt on read write"
d G "PAR_NO_INTR_STALL_ACTIVATED" 1 342 "0x40000000" "No interrupt, processor stall activated"
d G "PAR_INTR_ON_3_RW_BUF" 1 343 "0x60000000" "Interrupt on write to Buffer 3 or read from Buffer 3"
d G "PAR_PSP_AUTO_INC" 1 344 "0x18000000" "Read write buffers auto increment"
d G "PAR_DEC_ADDR" 1 345 "0x10000000" "Increment the address"
d G "PAR_INC_ADDR" 1 346 "0x08000000" "Decrement the address"
d G "PAR_MASTER_MODE_1" 1 347 "0x03000000" "Master mode 1"
d G "PAR_MASTER_MODE_2" 1 348 "0x02000000" "Master mode 2"
d G "PAR_WAITB1" 1 349 "0x00000000" "1 Tcy Wait state for data setup R/W"
d G "PAR_WAITB2" 1 350 "0x00400000" "2 Tcy Wait state for data setup R/W"
d G "PAR_WAITB3" 1 351 "0x00800000" "3 Tcy Wait state for data setup R/W"
d G "PAR_WAITB4" 1 352 "0x00C00000" "4 Tcy Wait state for data setup R/W"
d G "PAR_WAITM0" 1 353 "0x00000000" "0 wait state for Read to byte"
d G "PAR_WAITM1" 1 354 "0x00040000" "1 Tcy wait state for Read to byte"
d G "PAR_WAITM2" 1 355 "0x00080000" "2 Tcy wait state for Read to byte"
d G "PAR_WAITM3" 1 356 "0x000C0000" "3 Tcy wait state for Read to byte"
d G "PAR_WAITM15" 1 357 "0x003C0000" "15 wait states"
d G "PAR_WAITE1" 1 358 "0x00000000" "1 Tcy Wait for data hold after strobe"
d G "PAR_WAITE2" 1 359 "0x00010000" "2 Tcy Wait for data hold after strobe"
d G "PAR_WAITE3" 1 360 "0x00020000" "3 Tcy Wait for data hold after strobe"
d G "PAR_WAITE4" 1 361 "0x00030000" "4 Tcy Wait for data hold after strobe"
t G "rtc_time_t" 1 381 "{sint8 tm_year,sint8 tm_yday,sint8 tm_mday,sint8 tm_mon,sint8 tm_hour,sint8 tm_wday,sint8 tm_sec,sint8 tm_min,sint8 tm_isdst}" "Constants used in setup_rtc() are:  // Second param is calibration"
d G "RTC_ENABLE" 1 384 "0x8000"
d G "RTC_DISABLE" 1 385 "0"
d G "RTC_OUTPUT_SECONDS" 1 386 "0x20400"
d G "RTC_OUTPUT_ALARM" 1 387 "0x00400"
d G "RTC_ALARM_ENABLE" 1 390 "0x8000"
d G "RTC_ALARM_DISABLE" 1 391 "0"
d G "RTC_CHIME_ENABLE" 1 392 "0x4000"
d G "RTC_CHIME_DISABLE" 1 393 "0"
d G "RTC_ALARM_HALFSECOND" 1 395 "0x0000"
d G "RTC_ALARM_SECOND" 1 396 "0x0400"
d G "RTC_ALARM_10_SECONDS" 1 397 "0x0800"
d G "RTC_ALARM_MINUTE" 1 398 "0x0C00"
d G "RTC_ALARM_10_MINUTES" 1 399 "0x1000"
d G "RTC_ALARM_HOUR" 1 400 "0x1400"
d G "RTC_ALARM_DAY" 1 401 "0x1800"
d G "RTC_ALARM_WEEK" 1 402 "0x1C00"
d G "RTC_ALARM_MONTH" 1 403 "0x2000"
d G "RTC_ALARM_YEAR" 1 404 "0x2400"
d G "MPWM_DISABLED" 1 411 "0"
d G "MPWM_FREE_RUN" 1 412 "0x8000"
d G "MPWM_SINGLE_PULSE" 1 413 "0x8001"
d G "MPWM_UP_DOWN" 1 414 "0x8002"
d G "MPWM_UP_DOWN_WITH_INTS" 1 415 "0x8003"
d G "MPWM_HALT_WHEN_IDLE" 1 417 "0x2000"
d G "MPWM_DUTY_UPDATES_IMMEADIATE" 1 418 "0x40000"
d G "MPWM_SYNC_OVERRIDES" 1 419 "0x20000"
d G "MPWM_DISABLE_UPDATES" 1 420 "0x10000"
d G "MPWM_LATCH_FAULTS" 1 421 "0x100000"
d G "MPWM_INDEPENDENT" 1 424 "0x0001"
d G "MPWM_ENABLE" 1 425 "0x0006" "both H and L"
d G "MPWM_ENABLE_H" 1 426 "0x0004"
d G "MPWM_ENABLE_L" 1 427 "0x0002"
d G "MPWM_FORCE_L_0" 1 429 "0x0010"
d G "MPWM_FORCE_L_1" 1 430 "0x0050"
d G "MPWM_FORCE_H_0" 1 431 "0x0020"
d G "MPWM_FORCE_H_1" 1 432 "0x00A0"
d G "MPWM_FAULTA_LA_HA" 1 434 "0x0700"
d G "MPWM_FAULTA_LA_HI" 1 435 "0x0500"
d G "MPWM_FAULTA_LI_HA" 1 436 "0x0600"
d G "MPWM_FAULTA_LI_HI" 1 437 "0x0400"
d G "MPWM_FAULTB_LA_HA" 1 438 "0x7000"
d G "MPWM_FAULTB_LA_HI" 1 439 "0x5000"
d G "MPWM_FAULTB_LI_HA" 1 440 "0x6000"
d G "MPWM_FAULTB_LI_HI" 1 441 "0x4000"
d G "MPWM_FAULT_NO_CHANGE" 1 442 "0x0000"
d G "L_TO_H" 1 450 "0x40"
d G "H_TO_L" 1 451 "0"
d G "INTR_GLOBAL" 1 454 "0x400"
d G "INTR_NORMAL" 1 455 "0x100"
d G "INTR_ALTERNATE" 1 456 "0x200"
d G "INTR_LEVEL0" 1 457 "0x500"
d G "INTR_LEVEL1" 1 458 "0x501"
d G "INTR_LEVEL2" 1 459 "0x502"
d G "INTR_LEVEL3" 1 460 "0x503"
d G "INTR_LEVEL4" 1 461 "0x504"
d G "INTR_LEVEL5" 1 462 "0x505"
d G "INTR_LEVEL6" 1 463 "0x506"
d G "INTR_LEVEL7" 1 464 "0x507"
d G "INTR_CN_PIN" 1 466 "0x8000" "or in a PIN_xx constant"
d G "INT_OSCFAIL" 1 468 "1"
d G "INT_ADDRERR" 1 469 "2"
d G "INT_STACKERR" 1 470 "3"
d G "INT_MATHERR" 1 471 "4"
d G "INT_EXT0" 1 472 "6"
d G "INT_IC1" 1 473 "7"
d G "INT_OC1" 1 474 "8"
d G "INT_TIMER1" 1 475 "9"
d G "INT_IC2" 1 476 "70"
d G "INT_OC2" 1 477 "71"
d G "INT_TIMER2" 1 478 "72"
d G "INT_TIMER3" 1 479 "73"
d G "INT_SPI1E" 1 480 "74"
d G "INT_SPI1" 1 481 "75"
d G "INT_RDA" 1 482 "76"
d G "INT_TBE" 1 483 "77"
d G "INT_ADC1" 1 484 "78"
d G "INT_SI2C" 1 485 "81"
d G "INT_MI2C" 1 486 "82"
d G "INT_CNI" 1 487 "84"
d G "INT_EXT1" 1 488 "85"
d G "INT_OC3" 1 489 "90"
d G "INT_OC4" 1 490 "91"
d G "INT_TIMER4" 1 491 "92"
d G "INT_TIMER5" 1 492 "93"
d G "INT_EXT2" 1 493 "94"
d G "INT_RDA2" 1 494 "95"
d G "INT_TBE2" 1 495 "96"
d G "INT_SPI2E" 1 496 "97"
d G "INT_SPI2" 1 497 "98"
d G "INT_IC3" 1 498 "102"
d G "INT_IC4" 1 499 "103"
d G "INT_IC5" 1 500 "104"
d G "INT_OC5" 1 501 "106"
d G "INT_SI2C2" 1 502 "114"
d G "INT_MI2C2" 1 503 "115"
d G "INT_UART1E" 1 504 "130"
d G "INT_UART2E" 1 505 "131"
d G "INT_COMP" 1 506 "152"
d G "INT_PMP" 1 507 "164"
d G "INT_RTC" 1 508 "173"
d G "INT_CRC" 1 509 "174"
D G "_STDLIB" 2 12 ""
D G "RAND_MAX" 2 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 2 25 "1"
T G "div_t" 2 33 "{sint16 quot,sint16 rem}"
T G "ldiv_t" 2 38 "{sint32 quot,sint32 rem}" "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 3 13 ""
D G "ptrdiff_t" 3 18 "unsigned int16"
D G "size_t" 3 24 "unsigned int16"
D G "wchar_t" 3 26 "char"
D G "NULL" 3 27 "0"
D G "offsetof" 3 29 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 2 43 2 "FUNCTION"
C L "atoi" 2 46 1 "*"
C L "atoi" 2 46 1 "*"
V L "s" 2 50 "*int8"
F G "atoi" 2 50 "sint16(*int8 s)" "Syntax: signed int32  atoi32(char * s)"
D G "atoi32" 2 56 "(s) atol(s)"
C L "atoi" 2 46 5 "FUNCTION"
V L "s" 2 68 "*int8"
F G "atoi48" 2 68 "?(*int8 s)" "Syntax: signed int64  atoi64(char * s)"
C L "atoi48" 2 46 2 "FUNCTION"
V L "s" 2 73 "*int8"
F G "atoi64" 2 73 "?(*int8 s)" "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi64" 2 46 2 "FUNCTION"
V L "num" 2 79 "sint32"
V L "base" 2 79 "int16"
V L "s" 2 79 "*int8"
F G "itoa" 2 79 "*int8(sint32 num,int16 base,*int8 s)" "Standard template: signed int16  atol(char * s)"
C L "itoa" 2 81 1 "*"
C L "itoa" 2 81 1 "*"
V L "s" 2 85 "*int8"
F G "atol" 2 85 "sint32(*int8 s)" "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
C L "atol" 2 87 1 "*"
V L "s" 2 93 "*int8"
V L "endptr" 2 93 "*int8"
V L "base" 2 93 "sint16"
F G "strtol" 2 93 "sint32(*int8 s,*int8 endptr,sint16 base)" "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
C L "strtol" 2 95 1 "*"
V L "s" 2 101 "*int8"
V L "endptr" 2 101 "*int8"
V L "base" 2 101 "sint16"
F G "strtoul" 2 101 "int32(*int8 s,*int8 endptr,sint16 base)" "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 2 95 2 "FUNCTION"
C L "strtoul" 2 103 1 "*"
C L "strtoul" 2 103 1 "*"
C L "strtoul" 2 103 1 "*"
V L "s" 2 110 "*int8"
V L "endptr" 2 110 "*int8"
F G "strtof" 2 110 "float(*int8 s,*int8 endptr)"
V L "s" 2 112 "*int8"
V L "endptr" 2 112 "*int8"
F G "strtof48" 2 112 "?(*int8 s,*int8 endptr)"
V L "s" 2 113 "*int8"
V L "endptr" 2 113 "*int8"
F G "strtod" 2 113 "?(*int8 s,*int8 endptr)" "Standard template: float32 atof(char * s)"
C L "strtod" 2 120 1 "*"
D G "atof" 2 124 "(s)   strtof(s, 0)"
C L "strtod" 2 120 3 "FUNCTION"
C L "strtod" 2 130 1 "*"
D G "atof48" 2 134 "(s) strtof48(s, 0)"
C L "strtod" 2 130 1 "FUNCTION"
C L "strtod" 2 136 1 "*"
D G "atof64" 2 140 "(s) strtod(s, 0)"
C L "strtod" 2 136 1 "FUNCTION"
C L "strtod" 2 143 1 "*"
C L "strtod" 2 143 1 "*"
C L "strtod" 2 143 1 "*"
V L "s" 2 153 "*int8"
F G "atoe" 2 153 "float(*int8 s)" "Pseudo-random sequence generation functions"
C L "atoe" 2 143 1 "FUNCTION"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
C L "atoe" 2 160 1 "*"
F G "rand" 2 169 "int16()" "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
C L "rand" 2 171 1 "*"
V L "seed" 2 191 "int32"
F G "srand" 2 191 "void(int32 seed)" "Memory management functions"
C L "srand" 2 171 3 "FUNCTION"
V L "string" 2 205 "*int8"
F G "system" 2 205 "sint8(*int8 string)" "Searching and sorting utilities"
C L "system" 2 171 1 "FUNCTION"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 1 "*"
C L "system" 2 211 4 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
C L "system" 2 229 1 "*"
D G "labs" 2 249 "abs"
V L "numer" 2 251 "sint16"
V L "denom" 2 251 "sint16"
F G "div" 2 251 "div_t(sint16 numer,sint16 denom)"
V L "numer" 2 252 "sint32"
V L "denom" 2 252 "sint32"
F G "ldiv" 2 252 "ldiv_t(sint32 numer,sint32 denom)" "Multibyte character functions"
C L "ldiv" 2 229 4 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
D G "_STRING" 4 12 ""
C L "ldiv" 3 2 7 "FUNCTION"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 4 19 10 "FUNCTION"
V L "s1" 4 34 "*int8"
V L "s2" 4 34 "*int8"
V L "n" 4 34 "int16"
F G "memmove" 4 34 "*int8(*int8 s1,*int8 s2,int16 n)"
V L "sc1" 4 36 "*int8"
V L "sc2" 4 37 "*int8"
D G "strcopy" 4 54 "strcpy"
C L "strncpy" 4 19 4 "FUNCTION"
V L "s1" 4 61 "*int8"
V L "s2" 4 61 "*int8"
V L "n" 4 61 "int16"
F G "strncpy" 4 61 "*int8(*int8 s1,*int8 s2,int16 n)"
V L "s" 4 63 "*int8"
C L "strcat" 4 19 3 "FUNCTION"
V L "s1" 4 78 "*int8"
V L "s2" 4 78 "*int8"
F G "strcat" 4 78 "*int8(*int8 s1,*int8 s2)"
V L "s" 4 80 "*int8"
C L "strncat" 4 19 2 "FUNCTION"
V L "s1" 4 96 "*int8"
V L "s2" 4 96 "*int8"
V L "n" 4 96 "int16"
F G "strncat" 4 96 "*int8(*int8 s1,*int8 s2,int16 n)"
V L "s" 4 98 "*int8"
C L "memcmp" 4 19 3 "FUNCTION"
V L "s1" 4 120 "*int8"
V L "s2" 4 120 "*int8"
V L "n" 4 120 "int16"
F G "memcmp" 4 120 "sint8(*int8 s1,*int8 s2,int16 n)"
V L "su1" 4 122 "*int8"
V L "su2" 4 122 "*int8"
C L "strcmp" 4 19 2 "FUNCTION"
V L "s1" 4 134 "*int8"
V L "s2" 4 134 "*int8"
F G "strcmp" 4 134 "sint8(*int8 s1,*int8 s2)"
C L "strcoll" 4 19 2 "FUNCTION"
V L "s1" 4 144 "*int8"
V L "s2" 4 144 "*int8"
F G "strcoll" 4 144 "sint8(*int8 s1,*int8 s2)"
C L "strncmp" 4 19 4 "FUNCTION"
V L "s1" 4 157 "*int8"
V L "s2" 4 157 "*int8"
V L "n" 4 157 "int16"
F G "strncmp" 4 157 "sint8(*int8 s1,*int8 s2,int16 n)"
C L "strxfrm" 4 19 3 "FUNCTION"
V L "s1" 4 169 "*int8"
V L "s2" 4 169 "*int8"
V L "n" 4 169 "int16"
F G "strxfrm" 4 169 "int16(*int8 s1,*int8 s2,int16 n)"
V L "s" 4 171 "*int8"
V L "n1" 4 172 "int8"
C L "memchr" 4 19 3 "FUNCTION"
V L "s" 4 191 "*int8"
V L "c" 4 191 "int8"
V L "n" 4 191 "int16"
F G "memchr" 4 191 "*int8(*int8 s,int8 c,int16 n)"
V L "uc" 4 193 "int8"
V L "su" 4 194 "*int8"
C L "strchr" 4 19 2 "FUNCTION"
V L "s" 4 205 "*int8"
V L "c" 4 205 "int8"
F G "strchr" 4 205 "*int8(*int8 s,int8 c)"
C L "strcspn" 4 19 4 "FUNCTION"
V L "s1" 4 217 "*int8"
V L "s2" 4 217 "*int8"
F G "strcspn" 4 217 "int8(*int8 s1,*int8 s2)"
V L "sc1" 4 219 "*int8"
V L "sc2" 4 219 "*int8"
C L "strpbrk" 4 19 4 "FUNCTION"
V L "s1" 4 232 "*int8"
V L "s2" 4 232 "*int8"
F G "strpbrk" 4 232 "*int8(*int8 s1,*int8 s2)"
V L "sc1" 4 234 "*int8"
V L "sc2" 4 234 "*int8"
C L "strrchr" 4 19 2 "FUNCTION"
V L "s" 4 247 "*int8"
V L "c" 4 247 "int8"
F G "strrchr" 4 247 "*int8(*int8 s,int8 c)"
V L "p" 4 249 "*int8"
C L "strspn" 4 19 2 "FUNCTION"
V L "s1" 4 262 "*int8"
V L "s2" 4 262 "*int8"
F G "strspn" 4 262 "int8(*int8 s1,*int8 s2)"
V L "sc1" 4 264 "*int8"
V L "sc2" 4 264 "*int8"
C L "strstr" 4 19 6 "FUNCTION"
V L "s1" 4 281 "*int8"
V L "s2" 4 281 "*int8"
F G "strstr" 4 281 "*int8(*int8 s1,*int8 s2)"
V L "s" 4 283 "*int8"
V L "t" 4 283 "*int8"
C L "strtok" 4 19 13 "FUNCTION"
V L "s1" 4 320 "*int8"
V L "s2" 4 320 "*int8"
F G "strtok" 4 320 "*int8(*int8 s1,*int8 s2)"
V L "beg" 4 322 "*int8"
V L "end" 4 322 "*int8"
V L "save" 4 323 "*int8"
C L "strlen" 4 19 6 "FUNCTION"
V L "s" 4 369 "*int8"
F G "strlen" 4 369 "int8(*int8 s)"
V L "sc" 4 371 "*int8"
C L "stricmp" 4 19 2 "FUNCTION"
V L "s1" 4 380 "*int8"
V L "s2" 4 380 "*int8"
F G "stricmp" 4 380 "sint8(*int8 s1,*int8 s2)"
C L "strlwr" 4 19 3 "FUNCTION"
V L "s" 4 394 "*int8"
F G "strlwr" 4 394 "*int8(*int8 s)"
V L "p" 4 396 "*int8"
V L "numer" 2 274 "sint16"
V L "denom" 2 274 "sint16"
F G "div" 2 274 "div_t(sint16 numer,sint16 denom)"
V L "val" 2 276 "div_t"
V L "numer" 2 282 "sint32"
V L "denom" 2 282 "sint32"
F G "ldiv" 2 282 "ldiv_t(sint32 numer,sint32 denom)"
V L "val" 2 284 "ldiv_t"
V L "s" 2 292 "*int8"
F G "atoe" 2 292 "float(*int8 s)"
V L "pow10" 2 294 "float"
V L "result" 2 295 "float"
V L "sign" 2 296 "int8"
V L "expsign" 2 297 "int8"
V L "c" 2 298 "int8"
V L "ptr" 2 299 "int8"
V L "i" 2 300 "int8"
V L "exp" 2 301 "float"
V L "expcnt" 2 302 "int8"
C L "atoe" 2 328 1 "FUNCTION"
V L "s" 2 429 "*int8"
F G "atoi" 2 429 "sint16(*int8 s)"
V L "result" 2 431 "sint16"
V L "sign" 2 432 "int16"
V L "base" 2 432 "int16"
V L "index" 2 432 "int16"
V L "c" 2 433 "int8"
C L "atoi" 2 328 1 "FUNCTION"
C L "atoi" 2 328 1 "FUNCTION"
C L "atoi" 2 328 1 "FUNCTION"
C L "atoi" 2 328 1 "FUNCTION"
C L "atoi" 2 328 1 "FUNCTION"
C L "atoi" 2 328 1 "FUNCTION"
V L "s" 2 498 "*int8"
F G "atol" 2 498 "sint32(*int8 s)"
V L "result" 2 500 "sint32"
V L "sign" 2 501 "int16"
V L "base" 2 501 "int16"
V L "index" 2 501 "int16"
V L "c" 2 502 "int8"
C L "atol" 2 328 1 "FUNCTION"
C L "atol" 2 328 1 "FUNCTION"
C L "atol" 2 328 1 "FUNCTION"
C L "atol" 2 328 1 "FUNCTION"
C L "mult_with10" 2 328 1 "FUNCTION"
V L "num" 2 565 "sint32"
F G "mult_with10" 2 565 "sint32(sint32 num)"
V L "s" 2 639 "*int8"
F G "atoi48" 2 639 "?(*int8 s)"
V L "result" 2 641 "?"
V L "sign" 2 642 "sint8"
V L "base" 2 642 "sint8"
V L "index" 2 642 "sint8"
V L "c" 2 643 "int8"
C L "atoi48" 2 328 1 "FUNCTION"
C L "atoi48" 2 328 1 "FUNCTION"
C L "atoi48" 2 328 1 "FUNCTION"
C L "atoi48" 2 328 1 "FUNCTION"
C L "atoi48" 2 328 1 "FUNCTION"
V L "s" 2 704 "*int8"
F G "atoi64" 2 704 "?(*int8 s)"
V L "result" 2 706 "?"
V L "sign" 2 707 "sint8"
V L "base" 2 707 "sint8"
V L "index" 2 707 "sint8"
V L "c" 2 708 "int8"
C L "atoi64" 2 328 1 "FUNCTION"
C L "atoi64" 2 328 1 "FUNCTION"
C L "atoi64" 2 328 1 "FUNCTION"
C L "atoi64" 2 328 1 "FUNCTION"
C L "atoi64" 2 328 1 "FUNCTION"
V L "num" 2 770 "sint32"
V L "base" 2 770 "int16"
V L "s" 2 770 "*int8"
F G "itoa" 2 770 "*int8(sint32 num,int16 base,*int8 s)"
V L "temp" 2 772 "int32"
V L "i" 2 773 "int8"
V L "sign" 2 773 "int8"
V L "cnt" 2 773 "int8"
V L "c" 2 774 "int8"
C L "itoa" 2 328 1 "FUNCTION"
C L "itoa" 2 328 1 "FUNCTION"
C L "itoa" 2 328 1 "FUNCTION"
C L "itoa" 2 328 1 "FUNCTION"
C L "itoa" 2 328 1 "FUNCTION"
V L "s" 2 807 "*int8"
V L "endptr" 2 807 "*int8"
F G "strtof" 2 807 "float(*int8 s,*int8 endptr)"
V L "pow10" 2 809 "float"
V L "result" 2 810 "float"
V L "skip" 2 811 "int1"
V L "sign" 2 811 "int1"
V L "point" 2 811 "int1"
V L "c" 2 812 "int8"
V L "ptr" 2 813 "int8"
V L "s" 2 880 "*int8"
V L "endptr" 2 880 "*int8"
F G "strtof48" 2 880 "?(*int8 s,*int8 endptr)"
V L "pow10" 2 882 "?"
V L "result" 2 883 "?"
V L "skip" 2 884 "int1"
V L "sign" 2 884 "int1"
V L "point" 2 884 "int1"
V L "c" 2 885 "int8"
V L "ptr" 2 886 "int8"
V L "s" 2 952 "*int8"
V L "endptr" 2 952 "*int8"
F G "strtod" 2 952 "?(*int8 s,*int8 endptr)"
V L "pow10" 2 954 "?"
V L "result" 2 955 "?"
V L "skip" 2 956 "int1"
V L "sign" 2 956 "int1"
V L "point" 2 956 "int1"
V L "c" 2 957 "int8"
V L "ptr" 2 958 "int8"
V L "s" 2 1025 "*int8"
V L "endptr" 2 1025 "*int8"
V L "base" 2 1025 "sint16"
F G "strtoul" 2 1025 "int32(*int8 s,*int8 endptr,sint16 base)"
V L "sc" 2 1027 "*int8"
V L "s1" 2 1027 "*int8"
V L "sd" 2 1027 "*int8"
V L "x" 2 1028 "int32"
V L "sign" 2 1029 "int8"
V L "digits" 2 1030 "int8[1]"
C L "strtoul" 2 328 1 "FUNCTION"
C L "strtoul" 2 328 1 "FUNCTION"
C L "strtoul" 2 328 1 "FUNCTION"
V L "s" 2 1087 "*int8"
V L "endptr" 2 1087 "*int8"
V L "base" 2 1087 "sint16"
F G "strtol" 2 1087 "sint32(*int8 s,*int8 endptr,sint16 base)"
V L "sc" 2 1089 "*int8"
V L "s1" 2 1089 "*int8"
V L "sd" 2 1089 "*int8"
V L "x" 2 1090 "sint32"
V L "sign" 2 1091 "int8"
V L "digits" 2 1092 "int8[1]"
C L "strtol" 2 328 1 "FUNCTION"
C L "strtol" 2 328 1 "FUNCTION"
C L "strtol" 2 328 1 "FUNCTION"
V L "string" 2 1150 "*int8"
F G "system" 2 1150 "sint8(*int8 string)"
V L "s" 2 1155 "*int8"
V L "n" 2 1155 "int16"
F G "mblen" 2 1155 "sint8(*int8 s,int16 n)"
V L "pwc" 2 1160 "*int8"
V L "s" 2 1160 "*int8"
V L "n" 2 1160 "int16"
F G "mbtowc" 2 1160 "sint8(*int8 pwc,*int8 s,int16 n)"
V L "s" 2 1166 "*int8"
V L "wchar" 2 1166 "int8"
F G "wctomb" 2 1166 "sint8(*int8 s,int8 wchar)"
V L "pwcs" 2 1172 "*int8"
V L "s" 2 1172 "*int8"
V L "n" 2 1172 "int16"
F G "mbstowcs" 2 1172 "int16(*int8 pwcs,*int8 s,int16 n)"
V L "s" 2 1178 "*int8"
V L "pwcs" 2 1178 "*int8"
V L "n" 2 1178 "int16"
F G "wcstombs" 2 1178 "int16(*int8 s,*int8 pwcs,int16 n)"
V G "_Randseed" 2 1188 "int32"
F G "rand" 2 1190 "int16()"
V L "seed" 2 1196 "int32"
F G "srand" 2 1196 "void(int32 seed)"
V L "p1" 2 1208 "*int8"
V L "p2" 2 1208 "*int8"
T G "*_Cmpfun" 2 1208 "sint16(*int8 p1,*int8 p2)"
V L "qdata" 2 1213 "*int8"
V L "qitems" 2 1213 "int16"
V L "qsize" 2 1213 "int16"
V L "cmp" 2 1213 "_Cmpfun"
F G "qsort" 2 1213 "void(*int8 qdata,int16 qitems,int16 qsize,_Cmpfun cmp)"
V L "m" 2 1214 "int16"
V L "j" 2 1214 "int16"
V L "i" 2 1214 "int16"
V L "l" 2 1214 "int16"
V L "done" 2 1215 "int1"
V L "t" 2 1216 "int8[16]"
V L "key" 2 1241 "*int8"
V L "base" 2 1241 "*int8"
V L "num" 2 1241 "int16"
V L "width" 2 1241 "int16"
V L "cmp" 2 1241 "_Cmpfun"
F G "bsearch" 2 1241 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)"
V L "p" 2 1243 "*int8"
V L "q" 2 1243 "*int8"
V L "n" 2 1244 "int16"
V L "pivot" 2 1245 "int16"
V L "val" 2 1246 "sint16"
C L "bsearch" 2 328 1 "FUNCTION"
V G "pt" 0 16 "?[2]"
V G "ct" 0 17 "?[2]"
V G "K" 0 18 "?[2]"
V G "ans" 0 20 "?"
V L "x" 0 22 "?"
V L "r" 0 22 "?"
F G "_shiftR" 0 22 "void(? x,? r)"
V L "x" 0 26 "?"
V L "r" 0 26 "?"
F G "_shiftL" 0 26 "void(? x,? r)"
V L "x" 0 30 "?"
V L "y" 0 30 "?"
F G "_or" 0 30 "void(? x,? y)"
V L "x" 0 34 "?"
V L "y" 0 34 "?"
F G "_add" 0 34 "void(? x,? y)"
V L "x" 0 39 "?"
V L "y" 0 39 "?"
F G "_xor" 0 39 "void(? x,? y)"
C L "ROR" 0 44 63 "FUNCTION"
V L "x" 0 111 "?"
V L "r" 0 111 "?"
F G "ROR" 0 111 "void(? x,? r)"
V L "r1" 0 113 "?"
V L "r2" 0 115 "?"
V L "x" 0 119 "?"
V L "r" 0 119 "?"
F G "ROL" 0 119 "void(? x,? r)"
V L "r1" 0 121 "?"
V L "r2" 0 123 "?"
V L "x" 0 128 "?"
V L "y" 0 128 "?"
V L "K" 0 128 "?"
F G "r" 0 128 "void(? x,? y,? K)"
F G "encrypt" 0 141 "void()"
V L "i" 0 143 "?"
V L "B" 0 144 "?"
V L "A" 0 145 "?"
C L "encrypt" 0 44 3 "FUNCTION"
C L "encrypt" 0 44 3 "FUNCTION"
V L "block" 0 199 "int8[1]"
V L "ct" 0 199 "?[1]"
F G "convert" 0 199 "void(*int8 block,? ct)"
V L "ct" 0 219 "?[1]"
V L "block" 0 219 "int8[1]"
F G "convertback" 0 219 "void(? ct,*int8 block)"
V L "block" 0 224 "int8[16]"
V L "ct" 0 224 "?"
F G "convertbyte" 0 224 "void(*int8[16] block,? ct)"
V L "block" 0 237 "int8[16]"
F G "blockToSTring" 0 237 "void(*int8[16] block)"
V L "i" 0 238 "sint16"
C L "blockToSTring" 0 44 1 "FUNCTION"
C L "blockToSTring" 0 44 1 "FUNCTION"
V L "block" 0 249 "int8[8]"
F G "blockToSTringbyte" 0 249 "void(*int8[8] block)"
V L "i" 0 250 "sint16"
C L "blockToSTringbyte" 0 44 1 "FUNCTION"
C L "blockToSTringbyte" 0 44 1 "FUNCTION"
V L "digit" 0 260 "int8"
F G "convertdigit" 0 260 "sint16(int8 digit)"
V L "value" 0 262 "int8"
C L "setkey" 0 44 6 "FUNCTION"
F G "setkey" 0 326 "void()"
V L "i" 0 327 "sint16" "K0[0]=0x8;"
C L "setkey" 0 44 15 "FUNCTION"
F G "MAIN" 0 351 "void()"
V L "buffer" 0 353 "int8[33]"
V L "hex" 0 354 "int8[2]"
V L "i" 0 355 "sint16"
V L "temp" 0 356 "int8"
V L "block" 0 357 "int8[16]"
C L "MAIN" 0 44 1 "FUNCTION"
C L "MAIN" 0 44 1 "FUNCTION"
C L "MAIN" 0 44 1 "FUNCTION"
C L "MAIN" 0 44 1 "FUNCTION"
C L "MAIN" 0 44 1 "FUNCTION"
C L "MAIN" 0 44 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "set_pullup" 1 2
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_vref" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 0
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 0
F B "spi_data_is_in3" 0 0
F B "setup_crc" F B "crc_init" 0 1
F B "crc_calc8" 2 3
F B "crc_calc" 2 3
F B "setup_pmp" 2 0
F B "setup_psp" 2 0
F B "pmp_address" 1 0
F B "pmp_read" 0 0
F B "pmp_write" 1 0
F B "psp_read" 0 1
F B "psp_write" 0 1
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "pmp_output_full" 0 0
F B "pmp_input_full" 0 0
F B "pmp_overflow" 0 0
F B "setup_rtc" 2 0
F B "setup_rtc_alarm" 3 0
F B "rtc_read" 1 0
F B "rtc_write" 1 0
F B "rtc_alarm_read" 1 0
F B "rtc_alarm_write" 1 0
F B "setup_motor_pwm" 2 5
F B "set_motor_unit" 5 0
F B "set_motor_pwm_duty" 3 0
F B "set_motor_pwm_event" 2 0
F B "get_motor_pwm_count" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 2
